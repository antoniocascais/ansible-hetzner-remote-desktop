- name: "Validate remote user configuration"
  ansible.builtin.assert:
    that:
      - remote_user.name is defined
      - remote_user.name | length > 0
    fail_msg: "remote_user.name must be defined and non-empty"

- name: "Warn when no SSH keys provided for remote user"
  ansible.builtin.debug:
    msg: "No SSH public keys provided for remote user; supply remote_user.ssh_authorized_keys to enable logins."
    warn: true
  when: (remote_user.ssh_authorized_keys | default([])) | length == 0

- name: "Ensure timezone configured"
  community.general.timezone:
    name: "{{ system_defaults.timezone }}"
  when: system_defaults.timezone is defined

- name: "Update apt cache"
  ansible.builtin.apt:
    update_cache: true
    cache_valid_time: 0

- name: "Upgrade all packages"
  ansible.builtin.apt:
    upgrade: dist
    autoremove: true
    autoclean: true
  register: apt_upgrade_result

- name: "Check if reboot is required"
  ansible.builtin.stat:
    path: /var/run/reboot-required
  register: reboot_required_file

- name: "Reboot system if required"
  ansible.builtin.reboot:
    msg: "Rebooting after system updates"
    connect_timeout: 10
    reboot_timeout: 600
    pre_reboot_delay: 0
    post_reboot_delay: 60
    test_command: uptime
  when:
    - system_defaults.auto_reboot | default(true)
    - reboot_required_file.stat.exists

- name: "Ensure remote user primary group exists"
  ansible.builtin.group:
    name: "{{ remote_user.name }}"
    state: present

- name: "Ensure remote user exists"
  ansible.builtin.user:
    name: "{{ remote_user.name }}"
    password: "{{ remote_user.password if (remote_user.password is defined and remote_user.password | length > 0) else omit }}"
    state: "{{ remote_user.state | default('present') }}"
    shell: "{{ remote_user.shell | default('/bin/bash') }}"
    uid: "{{ remote_user.uid if (remote_user.uid is defined and remote_user.uid not in [None, '']) else omit }}"
    group: "{{ remote_user.name }}"
    groups: "{{ (remote_user.sudo | default(true)) | ternary('sudo', omit) }}"
    append: true
    create_home: true

- name: "Ensure remote user SSH directory"
  ansible.builtin.file:
    path: "/home/{{ remote_user.name }}/.ssh"
    state: directory
    owner: "{{ remote_user.name }}"
    group: "{{ remote_user.name }}"
    mode: "0700"

- name: "Install remote user authorized keys"
  ansible.posix.authorized_key:
    user: "{{ remote_user.name }}"
    key: "{{ item }}"
    state: present
    manage_dir: false
  loop: "{{ remote_user.ssh_authorized_keys | default([]) }}"
  when: (remote_user.ssh_authorized_keys | default([])) | length > 0

- name: "Configure sudo access for remote user"
  ansible.builtin.copy:
    dest: "/etc/sudoers.d/90-{{ remote_user.name }}"
    owner: root
    group: root
    mode: "0440"
    content: "{{ remote_user.name }} ALL=(ALL) ALL\n"
  when: remote_user.sudo | default(true)

- name: "Install hardened sshd_config"
  ansible.builtin.template:
    src: "sshd_config.j2"
    dest: "/etc/ssh/sshd_config"
    owner: root
    group: root
    mode: "0644"
  notify: "Restart sshd"

- name: "Ensure SSH service enabled"
  ansible.builtin.systemd:
    name: ssh
    enabled: true
